plot_ly(z = ~z) |> add_surface()
# Контурный график
x <- y <- seq(-5, 5, length.out = 20)
z <- outer(x, y, FUN = function(x,y) { f(x,y) })  |> t()
plot_ly(x=x, y=y, z=z, type="contour")
library(Deriv)
# Функция F(x, y)
f <- function(x, y) x * y
# Частные производные
dfx <- Deriv(f, "x")
dfy <- Deriv(f, "y")
# Точка, где частные производные равны 0
extremum <- data.frame(x = 0, y = 0); extremum
# Область определения
x <- seq(-5, 5, length = 20)
y <- seq(-5, 5, length = 20)
# Объемный график
x <- y <- seq(-5, 5, length.out = 20)
z <- outer(x, y, FUN = function(x,y) { f(x,y) })  |> t()
plot_ly(z = ~z) |> add_surface()
# Контурный график
x <- y <- seq(-5, 5, length.out = 20)
z <- outer(x, y, FUN = function(x,y) { f(x,y) })  |> t()
plot_ly(x=x, y=y, z=z, type="contour")
f <- function(x, y) 3*x^2+x*y+2*y^2-x-4*y
# Объемный график
x <- y <- seq(-5, 5, length.out = 20)
z <- outer(x, y, FUN = function(x,y) { f(x,y) })  |> t()
plot_ly(z = ~z) |> add_surface()
# Контурный график
x <- y <- seq(-5, 5, length.out = 20)
z <- outer(x, y, FUN = function(x,y) { f(x,y) })  |> t()
plot_ly(x=~x, y=~y, z=~z, type="contour")
# Частные производные
dfx <- Deriv(f, "x"); dfx
dfy <- Deriv(f, "y"); dfy
# Поиск минимума
result_min <- optim(f, c(x = 0, y = 0), method = "BFGS")
f <- function(x, y) 3*x^2+x*y+2*y^2-x-4*y
# Объемный график
x <- y <- seq(-5, 5, length.out = 20)
z <- outer(x, y, FUN = function(x,y) { f(x,y) })  |> t()
plot_ly(z = ~z) |> add_surface()
# Контурный график
x <- y <- seq(-5, 5, length.out = 20)
z <- outer(x, y, FUN = function(x,y) { f(x,y) })  |> t()
plot_ly(x=~x, y=~y, z=~z, type="contour")
# Частные производные
dfx <- Deriv(f, "x"); dfx
dfy <- Deriv(f, "y"); dfy
# Поиск минимума
result_min <- optim(f, c(x = 0, y = 0), method = "BFGS")
f <- function(x, y) 3*x^2+x*y+2*y^2-x-4*y
# Объемный график
x <- y <- seq(-5, 5, length.out = 20)
z <- outer(x, y, FUN = function(x,y) { f(x,y) })  |> t()
plot_ly(z = ~z) |> add_surface()
# Контурный график
x <- y <- seq(-5, 5, length.out = 20)
z <- outer(x, y, FUN = function(x,y) { f(x,y) })  |> t()
plot_ly(x=~x, y=~y, z=~z, type="contour")
# Частные производные
dfx <- Deriv(f, "x"); dfx
dfy <- Deriv(f, "y"); dfy
# Поиск минимума
starting_point <- c(x = 0, y = 0)
result_min <- optim(f, starting_point, method = "BFGS")
f <- function(x, y) 3*x^2+x*y+2*y^2-x-4*y
# Объемный график
x <- y <- seq(-5, 5, length.out = 20)
z <- outer(x, y, FUN = function(x,y) { f(x,y) })  |> t()
plot_ly(z = ~z) |> add_surface()
# Контурный график
x <- y <- seq(-5, 5, length.out = 20)
z <- outer(x, y, FUN = function(x,y) { f(x,y) })  |> t()
plot_ly(x=~x, y=~y, z=~z, type="contour")
# Частные производные
dfx <- Deriv(f, "x"); dfx
dfy <- Deriv(f, "y"); dfy
result <- optim(c(x, y), function(vec) F(vec[1], vec[2]))
f <- function(x, y) 3*x^2+x*y+2*y^2-x-4*y
# Объемный график
x <- y <- seq(-5, 5, length.out = 20)
z <- outer(x, y, FUN = function(x,y) { f(x,y) })  |> t()
plot_ly(z = ~z) |> add_surface()
# Контурный график
x <- y <- seq(-5, 5, length.out = 20)
z <- outer(x, y, FUN = function(x,y) { f(x,y) })  |> t()
plot_ly(x=~x, y=~y, z=~z, type="contour")
# Частные производные
dfx <- Deriv(f, "x"); dfx
dfy <- Deriv(f, "y"); dfy
result <- optim(c(x, y), function(vec) F(vec[1], vec[2])); result
f <- function(x, y) 3*x^2+x*y+2*y^2-x-4*y
# Объемный график
x <- y <- seq(-5, 5, length.out = 20)
z <- outer(x, y, FUN = function(x,y) { f(x,y) })  |> t()
plot_ly(z = ~z) |> add_surface()
# Контурный график
x <- y <- seq(-5, 5, length.out = 20)
z <- outer(x, y, FUN = function(x,y) { f(x,y) })  |> t()
plot_ly(x=~x, y=~y, z=~z, type="contour")
# Частные производные
dfx <- Deriv(f, "x"); dfx
dfy <- Deriv(f, "y"); dfy
result <- optim(c(x, y), function(vec) f(vec[1], vec[2])); result
library(Deriv)
# Функция F(x, y)
f <- function(x, y) x * y
# Частные производные
dfx <- Deriv(f, "x")
dfy <- Deriv(f, "y")
# Точка, где частные производные равны 0
extremum <- data.frame(x = 0, y = 0);
# Область определения
x <- seq(-5, 5, length = 20)
y <- seq(-5, 5, length = 20)
# Объемный график
x <- y <- seq(-5, 5, length.out = 20)
z <- outer(x, y, FUN = function(x,y) { f(x,y) })  |> t()
plot_ly(z = ~z) |> add_surface()
# Контурный график
x <- y <- seq(-5, 5, length.out = 20)
z <- outer(x, y, FUN = function(x,y) { f(x,y) })  |> t()
plot_ly(x=x, y=y, z=z, type="contour")
result <- optim(c(x, y), function(vec) f(vec[1], vec[2])); result
#install.packages("Deriv")
library(Deriv)
library(plotly)
f <- function(x) (x-5)^2+6*x
df <- Deriv(f, "x")
d2f <- Deriv(df, "x")
x <- seq(-45, 50, length.out=100)
min<- optimize(f, c(-45, 50))$minimum
cat("The minimum of the F(x): x =", min, "\n")
plot_ly(data.frame(x, f(x)), x= ~x, y=~f(x),type = 'scatter', mode = 'lines', text = "f(x)", name = 'f(x)') %>%
add_trace(data.frame(x, df(x)), x= ~x, y=~df(x),type = 'scatter', mode = 'lines', text = "df(x)", name = 'df(x)') %>%
add_trace(data.frame(x, d2f(x)), x= ~x, y=~d2f(x),type = 'scatter', mode = 'lines', text = "d2f(x)", name = 'd2f(x)') %>%
add_trace(data.frame(min, f(min)), x= ~min, y=~f(min),type = 'scatter', mode = 'markers', text = "Min", name = 'Min')
library(plotly)
library(Deriv)
# Параметры
r <- 1 # Радиус стола
# Функция освещенности
f <- function(x) {
cosA <- x / sqrt(x^2 + r^2)
cosA / (x^2 + r^2)
}
df <- Deriv(f, "x")
# Высота лампы
x <- seq(0, 5, length=100)
max<- optimize(F, c(0, 10), maximum = TRUE)$maximum
# Построение графика
plot_ly(data.frame(x, f(x)), x=~x, y=~f(x), type = 'scatter', mode = 'lines', text = "f(x)", name = 'f(x)') %>%
add_trace(data.frame(x, df(x)), x= ~x, y=~df(x),type = 'scatter', mode = 'lines', text = "df(x)", name = 'df(x)') %>%
add_trace(data.frame(max, f(max)), x= ~max, y=~f(max),type = 'scatter', mode = 'markers', text = "Max", name = 'Max')
f <- function(x, y) 3*x^2+x*y+2*y^2-x-4*y
# Объемный график
x <- y <- seq(-5, 5, length.out = 20)
z <- outer(x, y, FUN = function(x,y) { f(x,y) })  |> t()
plot_ly(z = ~z) |> add_surface()
# Контурный график
x <- y <- seq(-5, 5, length.out = 20)
z <- outer(x, y, FUN = function(x,y) { f(x,y) })  |> t()
plot_ly(x=~x, y=~y, z=~z, type="contour")
# Частные производные
dfx <- Deriv(f, "x"); dfx
dfy <- Deriv(f, "y"); dfy
result <- optim(c(x, y), function(vec) f(vec[1], vec[2])); result
library(Deriv)
# Функция F(x, y)
f <- function(x, y) x * y
# Частные производные
dfx <- Deriv(f, "x")
dfy <- Deriv(f, "y")
# Точка, где частные производные равны 0
extremum <- data.frame(x = 0, y = 0);
# Область определения
x <- seq(-5, 5, length = 20)
y <- seq(-5, 5, length = 20)
# Объемный график
x <- y <- seq(-5, 5, length.out = 20)
z <- outer(x, y, FUN = function(x,y) { f(x,y) })  |> t()
plot_ly(z = ~z) |> add_surface()
# Контурный график
x <- y <- seq(-5, 5, length.out = 20)
z <- outer(x, y, FUN = function(x,y) { f(x,y) })  |> t()
plot_ly(x=x, y=y, z=z, type="contour")
result <- optim(c(x, y), function(vec) f(vec[1], vec[2])); result
library(Deriv)
# Функция F(x, y)
f <- function(x, y) x * y
# Частные производные
dfx <- Deriv(f, "x")
dfy <- Deriv(f, "y")
# Точка, где частные производные равны 0
extremum <- data.frame(x = 0, y = 0);
# Область определения
x <- seq(-5, 5, length = 20)
y <- seq(-5, 5, length = 20)
# Объемный график
x <- y <- seq(-5, 5, length.out = 20)
z <- outer(x, y, FUN = function(x,y) { f(x,y) })  |> t()
plot_ly(z = ~z) |> add_surface()
# Контурный график
x <- y <- seq(-5, 5, length.out = 20)
z <- outer(x, y, FUN = function(x,y) { f(x,y) })  |> t()
plot_ly(x=x, y=y, z=z, type="contour")
result <- optim(c(x, y), function(vec) f(vec[1], vec[2])); result
H <- function(f, x, y) {
fxx <- Deriv(f, c("x", "x"))
fyy <- Deriv(f, c("y", "y"))
fxy <- Deriv(f, c("x", "y"))
matrix(c(fxx(x, y), fxy(x, y), fxy(x, y), fyy(x, y)), nrow = 2)
}
det_hessian <- function(f, x, y) {
H <- H(f, x, y)
det(H)
}
# Calculate determinant across the grid
det_vals <- outer(x, y, Vectorize(det_hessian, f = f))
library(Deriv)
# Функция F(x, y)
f <- function(x, y) x * y
# Частные производные
dfx <- Deriv(f, "x")
dfy <- Deriv(f, "y")
# Точка, где частные производные равны 0
extremum <- data.frame(x = 0, y = 0);
# Область определения
x <- seq(-5, 5, length = 20)
y <- seq(-5, 5, length = 20)
# Объемный график
x <- y <- seq(-5, 5, length.out = 20)
z <- outer(x, y, FUN = function(x,y) { f(x,y) })  |> t()
plot_ly(z = ~z) |> add_surface()
# Контурный график
x <- y <- seq(-5, 5, length.out = 20)
z <- outer(x, y, FUN = function(x,y) { f(x,y) })  |> t()
plot_ly(x=x, y=y, z=z, type="contour")
result <- optim(c(x, y), function(vec) f(vec[1], vec[2])); result
H <- function(f, x, y) {
fxx <- Deriv(f, c("x", "x"))
fyy <- Deriv(f, c("y", "y"))
fxy <- Deriv(f, c("x", "y"))
matrix(c(fxx(x, y), fxy(x, y), fxy(x, y), fyy(x, y)), nrow = 2)
}
det_hessian <- function(f, x, y) {
H <- H(f, x, y)
det(H)
}
wrapper_det_hessian <- function(f, x, y) {
det_hessian(f, x, y)
}
det_vals <- outer(x, y, Vectorize(wrapper_det_hessian))
library(Deriv)
# Функция F(x, y)
f <- function(x, y) x * y
# Частные производные
dfx <- Deriv(f, "x")
dfy <- Deriv(f, "y")
# Точка, где частные производные равны 0
extremum <- data.frame(x = 0, y = 0);
# Область определения
x <- seq(-5, 5, length = 20)
y <- seq(-5, 5, length = 20)
# Объемный график
x <- y <- seq(-5, 5, length.out = 20)
z <- outer(x, y, FUN = function(x,y) { f(x,y) })  |> t()
plot_ly(z = ~z) |> add_surface()
# Контурный график
x <- y <- seq(-5, 5, length.out = 20)
z <- outer(x, y, FUN = function(x,y) { f(x,y) })  |> t()
plot_ly(x=x, y=y, z=z, type="contour")
result <- optim(c(x, y), function(vec) f(vec[1], vec[2])); result
library(plotly)
library(Deriv)
# Параметры
r <- 1 # Радиус стола
# Функция освещенности
f <- function(x) {
cosA <- x / sqrt(x^2 + r^2)
cosA / (x^2 + r^2)
}
df <- Deriv(f, "x"); df
# Высота лампы
x <- seq(0, 5, length=100)
max<- optimize(F, c(0, 10), maximum = TRUE)$maximum
# Построение графика
plot_ly(data.frame(x, f(x)), x=~x, y=~f(x), type = 'scatter', mode = 'lines', text = "f(x)", name = 'f(x)') %>%
add_trace(data.frame(x, df(x)), x= ~x, y=~df(x),type = 'scatter', mode = 'lines', text = "df(x)", name = 'df(x)') %>%
add_trace(data.frame(max, f(max)), x= ~max, y=~f(max),type = 'scatter', mode = 'markers', text = "Max", name = 'Max')
f <- function(x, y) 3*x^2+x*y+2*y^2-x-4*y
# Объемный график
x <- y <- seq(-5, 5, length.out = 20)
z <- outer(x, y, FUN = function(x,y) { f(x,y) })  |> t()
plot_ly(z = ~z) |> add_surface()
# Контурный график
x <- y <- seq(-5, 5, length.out = 20)
z <- outer(x, y, FUN = function(x,y) { f(x,y) })  |> t()
plot_ly(x=~x, y=~y, z=~z, type="contour")
# Частные производные
dfx <- Deriv(f, "x"); dfx
dfy <- Deriv(f, "y"); dfy
result <- optim(c(x, y), function(vec) f(vec[1], vec[2])); result
f <- function(x, y) 3*x^2+x*y+2*y^2-x-4*y
# Объемный график
x <- y <- seq(-5, 5, length.out = 20)
z <- outer(x, y, FUN = function(x,y) { f(x,y) })  |> t()
plot_ly(z = ~z) |> add_surface()
# Контурный график
x <- y <- seq(-5, 5, length.out = 20)
z <- outer(x, y, FUN = function(x,y) { f(x,y) })  |> t()
plot_ly(x=~x, y=~y, z=~z, type="contour")
# Частные производные
dfx <- Deriv(f, "x"); dfx
dfy <- Deriv(f, "y"); dfy
result <- optim(c(x, y), function(vec) f(vec[1], vec[2])); result
f <- function(x, y) 3*x^2+x*y+2*y^2-x-4*y
# Объемный график
x <- y <- seq(-5, 5, length.out = 20)
z <- outer(x, y, FUN = function(x,y) { f(x,y) })  |> t()
plot_ly(z = ~z) |> add_surface()
# Контурный график
x <- y <- seq(-5, 5, length.out = 20)
z <- outer(x, y, FUN = function(x,y) { f(x,y) })  |> t()
plot_ly(x=~x, y=~y, z=~z, type="contour")
# Частные производные
dfx <- Deriv(f, "x"); dfx
dfy <- Deriv(f, "y"); dfy
result <- optim(c(x, y), function(vec) f(vec[1], vec[2])); result
library(Deriv)
# Функция F(x, y)
f <- function(x, y) x * y
# Частные производные
dfx <- Deriv(f, "x"); dfx
dfy <- Deriv(f, "y"); dfy
# Точка, где частные производные равны 0
extremum <- data.frame(x = 0, y = 0);
# Область определения
x <- seq(-5, 5, length = 20)
y <- seq(-5, 5, length = 20)
# Объемный график
x <- y <- seq(-5, 5, length.out = 20)
z <- outer(x, y, FUN = function(x,y) { f(x,y) })  |> t()
plot_ly(z = ~z) |> add_surface()
# Контурный график
x <- y <- seq(-5, 5, length.out = 20)
z <- outer(x, y, FUN = function(x,y) { f(x,y) })  |> t()
plot_ly(x=x, y=y, z=z, type="contour")
result <- optim(c(x, y), function(vec) f(vec[1], vec[2])); result
library(Deriv)
# Функция F(x, y)
f <- function(x, y) x * y
# Частные производные
dfx <- Deriv(f, "x"); dfx
dfy <- Deriv(f, "y"); dfy
# Точка, где частные производные равны 0
extremum <- data.frame(x = 0, y = 0);
# Область определения
x <- seq(-5, 5, length = 20)
y <- seq(-5, 5, length = 20)
# Объемный график
x <- y <- seq(-5, 5, length.out = 20)
z <- outer(x, y, FUN = f)  |> t()
plot_ly(x=~x, y=~y,z = ~z) |> add_surface()
# Контурный график
x <- y <- seq(-5, 5, length.out = 20)
z <- outer(x, y, FUN = function(x,y) { f(x,y) })  |> t()
plot_ly(x=x, y=y, z=z, type="contour")
result <- optim(c(x, y), function(vec) f(vec[1], vec[2])); result
1+1
#install.packages("Deriv")
library(Deriv)
library(plotly)
f <- function(x) (x-5)^2+6*x
df <- Deriv(f, "x")
d2f <- Deriv(df, "x")
x <- seq(-45, 50, length.out=100)
min<- optimize(f, c(-45, 50))$minimum
cat("The minimum of the F(x): x =", min, "\n")
plot_ly(data.frame(x, f(x)), x= ~x, y=~f(x),type = 'scatter', mode = 'lines', text = "f(x)", name = 'f(x)') |>
add_trace(data.frame(x, df(x)), x= ~x, y=~df(x),type = 'scatter', mode = 'lines', text = "df(x)", name = 'df(x)') %>%
add_trace(data.frame(x, d2f(x)), x= ~x, y=~d2f(x),type = 'scatter', mode = 'lines', text = "d2f(x)", name = 'd2f(x)') %>%
add_trace(data.frame(min, f(min)), x= ~min, y=~f(min),type = 'scatter', mode = 'markers', text = "Min", name = 'Min')
library(plotly)
library(Deriv)
# Параметры
r <- 1 # Радиус стола
# Функция освещенности
f <- function(x) {
cosA <- x / sqrt(x^2 + r^2)
cosA / (x^2 + r^2)
}
df <- Deriv(f, "x")
# Высота лампы
x <- seq(0, 5, length=100)
max<- optimize(F, c(0, 10), maximum = TRUE)$maximum
# Построение графика
plot_ly(data.frame(x, f(x)), x=~x, y=~f(x), type = 'scatter', mode = 'lines', text = "f(x)", name = 'f(x)') %>%
add_trace(data.frame(x, df(x)), x= ~x, y=~df(x),type = 'scatter', mode = 'lines', text = "df(x)", name = 'df(x)') %>%
add_trace(data.frame(max, f(max)), x= ~max, y=~f(max),type = 'scatter', mode = 'markers', text = "Max", name = 'Max')
f <- function(x, y) 3*x^2+x*y+2*y^2-x-4*y
# Объемный график
x <- y <- seq(-5, 5, length.out = 20)
z <- outer(x, y, FUN = function(x,y) { f(x,y) })  |> t()
plot_ly(z = ~z) |> add_surface()
# Контурный график
x <- y <- seq(-5, 5, length.out = 20)
z <- outer(x, y, FUN = function(x,y) { f(x,y) })  |> t()
plot_ly(x=~x, y=~y, z=~z, type="contour")
# Частные производные
dfx <- Deriv(f, "x"); dfx
dfy <- Deriv(f, "y"); dfy
result <- optim(c(x, y), function(vec) f(vec[1], vec[2])); result
library(plotly)
library(Deriv)
# Параметры
r <- 1 # Радиус стола
# Функция освещенности
f <- function(x) {
cosA <- x / sqrt(x^2 + r^2)
cosA / (x^2 + r^2)
}
df <- Deriv(f, "x")
# Высота лампы
x <- seq(0, 5, length=100)
max<- optimize(F, c(0, 10), maximum = TRUE)$maximum
# Построение графика
plot_ly(data.frame(x, f(x)), x=~x, y=~f(x), type = 'scatter', mode = 'lines', text = "f(x)", name = 'f(x)') %>%
add_trace(data.frame(x, df(x)), x= ~x, y=~df(x),type = 'scatter', mode = 'lines', text = "df(x)", name = 'df(x)') %>%
add_trace(data.frame(max, f(max)), x= ~max, y=~f(max),type = 'scatter', mode = 'markers', text = "Max", name = 'Max')
# Контурный график
x <- y <- seq(-5, 5, length.out = 20)
z <- outer(x, y, FUN = function(x,y) { f(x,y) })  |> t()
# Объемный график
x <- y <- seq(-5, 5, length.out = 20)
z <- outer(x, y, FUN = f)  |> t()
# Частные производные
dfx <- Deriv(f, "x"); dfx
dfy <- Deriv(f, "y"); dfy
# Точка, где частные производные равны 0
extremum <- data.frame(x = 0, y = 0);
# Область определения
x <- seq(-5, 5, length = 20)
y <- seq(-5, 5, length = 20)
f <- function(x, y) 3*x^2+x*y+2*y^2-x-4*y
x <- y <- seq(-5, 5, length.out = 20)
z <- outer(x, y, FUN = function(x,y) { f(x,y) })  |> t()
plot_ly(z = ~z) |> add_surface()
# Контурный график
x <- y <- seq(-5, 5, length.out = 20)
z <- outer(x, y, FUN = function(x,y) { f(x,y) })  |> t()
plot_ly(x=~x, y=~y, z=~z, type="contour")
# Частные производные
dfx <- Deriv(f, "x"); dfx
dfy <- Deriv(f, "y"); dfy
result <- optim(c(x, y), function(vec) f(vec[1], vec[2])); result
library(Deriv)
# Функция F(x, y)
f <- function(x, y) x * y
library(Deriv)
# Функция F(x, y)
f <- function(x, y) x * y
# Частные производные
dfx <- Deriv(f, "x"); dfx
dfy <- Deriv(f, "y"); dfy
# Точка, где частные производные равны 0
extremum <- data.frame(x = 0, y = 0);
# Область определения
x <- seq(-5, 5, length = 20)
y <- seq(-5, 5, length = 20)
# Объемный график
x <- y <- seq(-5, 5, length.out = 20)
z <- outer(x, y, FUN = f)  |> t()
plot_ly(x=~x, y=~y,z = ~z) |> add_surface()
# Контурный график
x <- y <- seq(-5, 5, length.out = 20)
z <- outer(x, y, FUN = function(x,y) { f(x,y) })  |> t()
plot_ly(x=x, y=y, z=z, type="contour")
result <- optim(c(x, y), function(vec) f(vec[1], vec[2])); result
# Контурный график
x <- y <- seq(-5, 5, length.out = 20)
z <- outer(x, y, FUN = function(x,y) { f(x,y) })  |> t()
plot_ly(x=x, y=y, z=z, type="contour")
result <- optim(c(x, y), function(vec) f(vec[1], vec[2]))
# Частные производные
dfx <- Deriv(f, "x"); dfx
dfy <- Deriv(f, "y"); dfy
result <- optim(c(x, y), function(vec) f(vec[1], vec[2]))
# Контурный график
x <- y <- seq(-5, 5, length.out = 20)
z <- outer(x, y, FUN = function(x,y) { f(x,y) })  |> t()
plot_ly(x=x, y=y, z=z, type="contour")
result <- optim(c(x, y), function(vec) f(vec[1], vec[2]))
#install.packages("Deriv")
library(Deriv)
library(plotly)
f <- function(x) (x-5)^2+6*x
df <- Deriv(f, "x")
d2f <- Deriv(df, "x")
x <- seq(-45, 50, length.out=100)
min<- optimize(f, c(-45, 50))$minimum
cat("The minimum of the F(x): x =", min, "\n")
plot_ly(data.frame(x, f(x)), x= ~x, y=~f(x),type = 'scatter', mode = 'lines', text = "f(x)", name = 'f(x)') |>
add_trace(data.frame(x, df(x)), x= ~x, y=~df(x),type = 'scatter', mode = 'lines', text = "df(x)", name = 'df(x)') |>
add_trace(data.frame(x, d2f(x)), x= ~x, y=~d2f(x),type = 'scatter', mode = 'lines', text = "d2f(x)", name = 'd2f(x)') |>
add_trace(data.frame(min, f(min)), x= ~min, y=~f(min),type = 'scatter', mode = 'markers', text = "Min", name = 'Min')
plot_ly(data.frame(x, f(x)), x= ~x, y=~f(x),type = 'scatter', mode = 'lines', text = "f(x)", name = 'f(x)') |>
add_trace(data.frame(x, df(x)), x= ~x, y=~df(x),type = 'scatter', mode = 'lines', text = "df(x)", name = 'df(x)') |>
add_trace(data.frame(x, d2f(x)), x= ~x, y=~d2f(x),type = 'scatter', mode = 'lines', text = "d2f(x)", name = 'd2f(x)') |>
add_trace(data.frame(min, f(min)), x= ~min, y=~f(min),type = 'scatter', mode = 'markers', text = "Min", name = 'Min')
