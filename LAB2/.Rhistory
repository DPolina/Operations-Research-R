which(optimum$solution>0)
library(lpSolveAPI)
lprob <- make.lp(0, 10)
stub <- lp.control(lprob, sense = "min")
rm(stub)
add.constraint(lprob, c(1, 1, 1, 1, 0, 0, 0, 0, 0, 0), "<=", 400)
add.constraint(lprob, c(0, 0, 0, 0, 1, 1, 0, 0, 0, 0), "<=", 800)
add.constraint(lprob, c(0, 0, 0, 0, 0, 0, 1, 1, 1, 1), "<=", 600)
add.constraint(lprob, c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1), ">=", 1200)
add.constraint(lprob, c(1, 0, 0, 0, 0, 0, 0, 0, 0, 0), "<=", 700)
add.constraint(lprob, c(0, 1, 0, 0, 0, 0, 0, 0, 0, 0), "<=", 700)
add.constraint(lprob, c(0, 0, 1, 0, 0, 0, 0, 0, 0, 0), "<=", 700)
add.constraint(lprob, c(0, 0, 0, 1, 0, 0, 0, 0, 0, 0), "<=", 700)
add.constraint(lprob, c(0, 0, 0, 0, 1, 0, 0, 0, 0, 0), "<=", 700)
add.constraint(lprob, c(0, 0, 0, 0, 0, 1, 0, 0, 0, 0), "<=", 700)
add.constraint(lprob, c(0, 0, 0, 0, 0, 0, 1, 0, 0, 0), "<=", 700)
add.constraint(lprob, c(0, 0, 0, 0, 0, 0, 0, 1, 0, 0), "<=", 700)
add.constraint(lprob, c(0, 0, 0, 0, 0, 0, 0, 0, 1, 0), "<=", 700)
add.constraint(lprob, c(0, 0, 0, 0, 0, 0, 0, 0, 0, 1), "<=", 700)
set.objfn(lprob, c(10, 4, 8, 6, 2, 3, 8, 2, 6, 6))
lprob
status_code <- solve(lprob)
get.objective(lprob)
get.variables(lprob)
get.sensitivity.obj(lprob)
get.sensitivity.rhs(lprob)
which(get.sensitivity.rhs(lprob)$duals>0)
optimum$sens.coef.from
optimum$sens.coef.to
optimum$duals
optimum$duals.from
optimum$duals.to
library(lpSolve)
rm(list=ls())
Fun <- c(10, 4, 8, 6, 2, 3, 8, 2, 6, 6)
A <- rbind(
c(1, 1, 1, 1, 0, 0, 0, 0, 0, 0),
c(0, 0, 0, 0, 1, 1, 0, 0, 0, 0),
c(0, 0, 0, 0, 0, 0, 1, 1, 1, 1),
c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1),
diag(10))
B <- c(400, 800, 600, 1200)
CD <- c("<=", "<=", "<=", ">=")
B <- c(B, replicate(10, 700))
CD <- c(CD, replicate(10, "<="))
optimum <- lp(
direction = "min",
objective.in = Fun,
const.mat = A,
const.dir = CD,
const.rhs = B,
compute.sens = TRUE)
optimum
optimum$solution
which(optimum$solution>0)
library(lpSolveAPI)
lprob <- make.lp(0, 10)
stub <- lp.control(lprob, sense = "min")
rm(stub)
add.constraint(lprob, c(1, 1, 1, 1, 0, 0, 0, 0, 0, 0), "<=", 400)
add.constraint(lprob, c(0, 0, 0, 0, 1, 1, 0, 0, 0, 0), "<=", 800)
add.constraint(lprob, c(0, 0, 0, 0, 0, 0, 1, 1, 1, 1), "<=", 600)
add.constraint(lprob, c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1), ">=", 1200)
add.constraint(lprob, c(1, 0, 0, 0, 0, 0, 0, 0, 0, 0), "<=", 700)
add.constraint(lprob, c(0, 1, 0, 0, 0, 0, 0, 0, 0, 0), "<=", 700)
add.constraint(lprob, c(0, 0, 1, 0, 0, 0, 0, 0, 0, 0), "<=", 700)
add.constraint(lprob, c(0, 0, 0, 1, 0, 0, 0, 0, 0, 0), "<=", 700)
add.constraint(lprob, c(0, 0, 0, 0, 1, 0, 0, 0, 0, 0), "<=", 700)
add.constraint(lprob, c(0, 0, 0, 0, 0, 1, 0, 0, 0, 0), "<=", 700)
add.constraint(lprob, c(0, 0, 0, 0, 0, 0, 1, 0, 0, 0), "<=", 700)
add.constraint(lprob, c(0, 0, 0, 0, 0, 0, 0, 1, 0, 0), "<=", 700)
add.constraint(lprob, c(0, 0, 0, 0, 0, 0, 0, 0, 1, 0), "<=", 700)
add.constraint(lprob, c(0, 0, 0, 0, 0, 0, 0, 0, 0, 1), "<=", 700)
set.objfn(lprob, c(10, 4, 8, 6, 2, 3, 8, 2, 6, 6))
lprob
status_code <- solve(lprob)
get.objective(lprob)
get.variables(lprob)
get.sensitivity.obj(lprob)
get.sensitivity.rhs(lprob)
which(get.sensitivity.rhs(lprob)$duals>0)
optimum$sens.coef.from
optimum$sens.coef.to
optimum$duals
optimum$duals.from
optimum$duals.to
library(lpSolve)
rm(list=ls())
Fun <- c(10, 4, 8, 6, 2, 3, 8, 2, 6, 6)
A <- rbind(
c(1, 1, 1, 1, 0, 0, 0, 0, 0, 0),
c(0, 0, 0, 0, 1, 1, 0, 0, 0, 0),
c(0, 0, 0, 0, 0, 0, 1, 1, 1, 1),
c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1),
diag(10))
B <- c(400, 800, 600, 1200)
CD <- c("<=", "<=", "<=", ">=")
B <- c(B, replicate(10, 700))
CD <- c(CD, replicate(10, "<="))
optimum <- lp(
direction = "min",
objective.in = Fun,
const.mat = A,
const.dir = CD,
const.rhs = B,
compute.sens = TRUE)
optimum
optimum$solution
which(optimum$solution>0)
library(lpSolveAPI)
lprob <- make.lp(0, 10)
stub <- lp.control(lprob, sense = "min")
rm(stub)
add.constraint(lprob, c(1, 1, 1, 1, 0, 0, 0, 0, 0, 0), "<=", 400)
add.constraint(lprob, c(0, 0, 0, 0, 1, 1, 0, 0, 0, 0), "<=", 800)
add.constraint(lprob, c(0, 0, 0, 0, 0, 0, 1, 1, 1, 1), "<=", 600)
add.constraint(lprob, c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1), ">=", 1200)
add.constraint(lprob, c(1, 0, 0, 0, 0, 0, 0, 0, 0, 0), "<=", 700)
add.constraint(lprob, c(0, 1, 0, 0, 0, 0, 0, 0, 0, 0), "<=", 700)
add.constraint(lprob, c(0, 0, 1, 0, 0, 0, 0, 0, 0, 0), "<=", 700)
add.constraint(lprob, c(0, 0, 0, 1, 0, 0, 0, 0, 0, 0), "<=", 700)
add.constraint(lprob, c(0, 0, 0, 0, 1, 0, 0, 0, 0, 0), "<=", 700)
add.constraint(lprob, c(0, 0, 0, 0, 0, 1, 0, 0, 0, 0), "<=", 700)
add.constraint(lprob, c(0, 0, 0, 0, 0, 0, 1, 0, 0, 0), "<=", 700)
add.constraint(lprob, c(0, 0, 0, 0, 0, 0, 0, 1, 0, 0), "<=", 700)
add.constraint(lprob, c(0, 0, 0, 0, 0, 0, 0, 0, 1, 0), "<=", 700)
add.constraint(lprob, c(0, 0, 0, 0, 0, 0, 0, 0, 0, 1), "<=", 700)
set.objfn(lprob, c(10, 4, 8, 6, 2, 3, 8, 2, 6, 6))
lprob
status_code <- solve(lprob)
get.objective(lprob)
get.variables(lprob)
get.sensitivity.obj(lprob)
get.sensitivity.rhs(lprob)
which(get.sensitivity.rhs(lprob)$duals>0)
optimum$sens.coef.from
optimum$sens.coef.to
optimum$duals
optimum$duals.from
optimum$duals.to
library(lpSolve)
rm(list=ls())
Fun <- c(10, 4, 8, 6, 2, 3, 8, 2, 6, 6)
A <- rbind(
c(1, 1, 1, 1, 0, 0, 0, 0, 0, 0),
c(0, 0, 0, 0, 1, 1, 0, 0, 0, 0),
c(0, 0, 0, 0, 0, 0, 1, 1, 1, 1),
c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1),
diag(10))
B <- c(400, 800, 600, 1200)
CD <- c("<=", "<=", "<=", ">=")
B <- c(B, replicate(10, 700))
CD <- c(CD, replicate(10, "<="))
optimum <- lp(
direction = "min",
objective.in = Fun,
const.mat = A,
const.dir = CD,
const.rhs = B,
compute.sens = TRUE)
optimum
optimum$solution
which(optimum$solution>0)
library(lpSolveAPI)
lprob <- make.lp(0, 10)
stub <- lp.control(lprob, sense = "min")
rm(stub)
add.constraint(lprob, c(1, 1, 1, 1, 0, 0, 0, 0, 0, 0), "<=", 400)
add.constraint(lprob, c(0, 0, 0, 0, 1, 1, 0, 0, 0, 0), "<=", 800)
add.constraint(lprob, c(0, 0, 0, 0, 0, 0, 1, 1, 1, 1), "<=", 600)
add.constraint(lprob, c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1), ">=", 1200)
add.constraint(lprob, c(1, 0, 0, 0, 0, 0, 0, 0, 0, 0), "<=", 700)
add.constraint(lprob, c(0, 1, 0, 0, 0, 0, 0, 0, 0, 0), "<=", 700)
add.constraint(lprob, c(0, 0, 1, 0, 0, 0, 0, 0, 0, 0), "<=", 700)
add.constraint(lprob, c(0, 0, 0, 1, 0, 0, 0, 0, 0, 0), "<=", 700)
add.constraint(lprob, c(0, 0, 0, 0, 1, 0, 0, 0, 0, 0), "<=", 700)
add.constraint(lprob, c(0, 0, 0, 0, 0, 1, 0, 0, 0, 0), "<=", 700)
add.constraint(lprob, c(0, 0, 0, 0, 0, 0, 1, 0, 0, 0), "<=", 700)
add.constraint(lprob, c(0, 0, 0, 0, 0, 0, 0, 1, 0, 0), "<=", 700)
add.constraint(lprob, c(0, 0, 0, 0, 0, 0, 0, 0, 1, 0), "<=", 700)
add.constraint(lprob, c(0, 0, 0, 0, 0, 0, 0, 0, 0, 1), "<=", 700)
set.objfn(lprob, c(10, 4, 8, 6, 2, 3, 8, 2, 6, 6))
lprob
status_code <- solve(lprob)
get.objective(lprob)
get.variables(lprob)
get.sensitivity.obj(lprob)
get.sensitivity.rhs(lprob)
which(get.sensitivity.rhs(lprob)$duals>0)
optimum$sens.coef.from
optimum$sens.coef.to
optimum$duals
optimum$duals.from
optimum$duals.to
get.sensitivity.obj(lprob)
get.sensitivity.rhs(lprob)
which(get.sensitivity.rhs(lprob)$duals>0)
library(lpSolve)
rm(list=ls())
Fun <- c(10, 4, 8, 6, 2, 3, 8, 2, 6, 6)
A <- rbind(
c(1, 1, 1, 1, 0, 0, 0, 0, 0, 0),
c(0, 0, 0, 0, 1, 1, 0, 0, 0, 0),
c(0, 0, 0, 0, 0, 0, 1, 1, 1, 1),
c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1),
diag(10))
B <- c(400, 800, 600, 1200)
CD <- c("<=", "<=", "<=", ">=")
B <- c(B, replicate(10, 700))
CD <- c(CD, replicate(10, "<="))
optimum <- lp(
direction = "min",
objective.in = Fun,
const.mat = A,
const.dir = CD,
const.rhs = B,
compute.sens = TRUE)
optimum
optimum$solution
which(optimum$solution>0)
library(lpSolveAPI)
lprob <- make.lp(0, 10)
stub <- lp.control(lprob, sense = "min")
rm(stub)
add.constraint(lprob, c(1, 1, 1, 1, 0, 0, 0, 0, 0, 0), "<=", 400)
add.constraint(lprob, c(0, 0, 0, 0, 1, 1, 0, 0, 0, 0), "<=", 800)
add.constraint(lprob, c(0, 0, 0, 0, 0, 0, 1, 1, 1, 1), "<=", 600)
add.constraint(lprob, c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1), ">=", 1200)
add.constraint(lprob, c(1, 0, 0, 0, 0, 0, 0, 0, 0, 0), "<=", 700)
add.constraint(lprob, c(0, 1, 0, 0, 0, 0, 0, 0, 0, 0), "<=", 700)
add.constraint(lprob, c(0, 0, 1, 0, 0, 0, 0, 0, 0, 0), "<=", 700)
add.constraint(lprob, c(0, 0, 0, 1, 0, 0, 0, 0, 0, 0), "<=", 700)
add.constraint(lprob, c(0, 0, 0, 0, 1, 0, 0, 0, 0, 0), "<=", 700)
add.constraint(lprob, c(0, 0, 0, 0, 0, 1, 0, 0, 0, 0), "<=", 700)
add.constraint(lprob, c(0, 0, 0, 0, 0, 0, 1, 0, 0, 0), "<=", 700)
add.constraint(lprob, c(0, 0, 0, 0, 0, 0, 0, 1, 0, 0), "<=", 700)
add.constraint(lprob, c(0, 0, 0, 0, 0, 0, 0, 0, 1, 0), "<=", 700)
add.constraint(lprob, c(0, 0, 0, 0, 0, 0, 0, 0, 0, 1), "<=", 700)
set.objfn(lprob, c(10, 4, 8, 6, 2, 3, 8, 2, 6, 6))
lprob
status_code <- solve(lprob)
get.objective(lprob)
get.variables(lprob)
get.sensitivity.obj(lprob)
get.sensitivity.rhs(lprob)
which(get.sensitivity.rhs(lprob)$duals>0)
optimum$sens.coef.from
optimum$sens.coef.to
optimum$duals
optimum$duals.from
optimum$duals.to
install.packages("ggplot2")
library(plotly)
add_region <- function(fig, xy, name = "region", color) {
add_trace(
fig,
x = xy[, 1],
y = xy[, 2],
type = "scatter",
fill = "toself",
fillcolor = color,
hoveron = "points+fills",
marker = list(color = "red"),
line = list(color = color),
text = apply(xy, 1, paste, collapse = ","),
hoverinfo = "text",
name = TeX(name)
)
}
library(plotly)
plot_ly(mode = "lines+markers") |>
add_region(
xy = rbind(c(0, 0), c(0, 2048 / 4), c(2048, 0)),
color = "rgba(255, 212, 96, 0.5)",
name = "x_1+4x_2\\leq2048") |>
add_region(
xy = rbind(c(0, 0), c(0, 2048), c(2048 / 2, 0)),
color = "rgba(168, 216, 234, 0.5)",
name = "2x_1+x_2\\leq2048") |>
add_region(
xy = rbind(c(0, 0), c(0, 480), c(2048, 480), c(2048, 0)),
color = "rgba(54, 216, 234, 0.5)",
name = "x_2\\leq480") |>
config(mathjax = "cdn")
plot_ly(mode = "lines+markers") |>
add_region(
xy = rbind(c(0, 0), c(0, 480), c(128, 480), c(6144 / 7, 2048 / 7), c(2048 / 2, 0)),
name = "region",
color = "rgba(168, 216, 234, 0.5)") |>
config(mathjax = "cdn")
x <- seq(0, 1100, length.out = 100)
y <- seq(0, 500, length.out = 100)
z <- outer(x, y, FUN = \(x1, x2) {
2 * x1 + 6 * x2
}) |> t()
plot_ly(x = x, y = y, z = z, type = "contour") |>
add_region(
xy = rbind(c(0, 0), c(0, 480), c(128, 480), c(6144 / 7, 2048 / 7), c(2048 / 2, 0)),
color = "rgba(168, 216, 234, 0.5)") |>
config(mathjax = "cdn")
library(lpSolve)
Fun <- c(2, 6)
A <- rbind(c(1, 4), c(2, 1), c(0, 1))
B <- c(2048, 2048, 480)
CD <- c("<=", "<=", "<=")
optimum <- lp(
direction = "max",
objective.in = Fun,
const.mat = A,
const.dir = CD,
const.rhs = B,
compute.sens = TRUE)
optimum
optimum$solution
library(lpSolveAPI)
lprob <- make.lp(0, 2)
stub <- lp.control(lprob, sense = "max")
rm(stub)
add.constraint(lprob, c(1, 4), "<=", 2048)
add.constraint(lprob, c(2, 1), "<=", 2048)
add.constraint(lprob, c(0, 1), "<=", 480)
set.objfn(lprob, c(2, 6))
lprob
status_code <- solve(lprob)
get.objective(lprob)
get.variables(lprob)
get.sensitivity.obj(lprob)
get.sensitivity.rhs(lprob)
optimum$sens.coef.from
optimum$sens.coef.to
optimum$duals
optimum$duals.from
optimum$duals.to
plot_ly(mode = "lines+markers") |>
add_region(
xy = rbind(c(0, 100), c(120, 0), c(0, 0)),
name = "5x_1+6x_2\\leq600",
color = "rgba(255, 216, 234, 0.5)") |>
add_region(
xy = rbind(c(0, 80), c(160, 0), c(0, 0)),
name = "x_1+2x_2\\leq160",
color = "rgba(168, 216, 234, 0.5)") |>
add_region(
xy = rbind(c(0, 0), c(0, 100), c(80, 100), c(80, 0)),
name = "x_1\\leq80",
color = "rgba(168, 216, 234, 0.5)") |>
config(mathjax = "cdn")
x <- seq(0, 80, length.out = 100)
y <- seq(0, 80, length.out = 100)
z <- outer(x, y, FUN = \(x1, x2) {
x1 + 2 * x2
}) |> t()
plot_ly(x = x, y = y, z = z, type = "contour") |>
add_region(
xy = rbind(c(0, 0), c(0, 80), c(60, 50), c(80, 100 / 3), c(80, 0)),
name = "region",
color = "rgba(168, 216, 234, 0.5)") |>
config(mathjax = "cdn")
library(lpSolve)
Fun <- c(1, 2)
A <- rbind(c(0, 1), c(5, 6), c(1, 2))
B <- c(80, 600, 160)
CD <- c("<=", "<=", "<=")
optimum <- lp(
direction = "max",
objective.in = Fun,
const.mat = A,
const.dir = CD,
const.rhs = B,
compute.sens = TRUE)
optimum
optimum$solution
optimum$sens.coef.from
optimum$sens.coef.to
optimum$duals
optimum$duals.from
optimum$duals.to
plot_ly(mode = "lines+markers") |>
add_region(
xy = rbind(c(600, 0), c(0, 400), c(0, 600), c(600, 600)),
name = "2x_1+3x_2\\geq1200",
color = "rgba(255, 212, 255, 0.5)") |>
add_region(
xy = rbind(c(0, 0), c(400, 0), c(0, 400)),
name = "x_1+x_2\\leq400",
color = "rgba(255, 212, 96, 0.5)") |>
add_region(
xy = rbind(c(0, 600), c(450, 0), c(600, 0), c(600, 600)),
name = "2x_1+1.5x_2\\geq900",
color = "rgba(255, 255, 96, 0.5)") |>
config(mathjax = "cdn")
library(lpSolve)
Fun <- c(200, 300)
A <- rbind(c(2, 3), c(1, 2), c(2, 1.5))
B <- c(1200, 400, 900)
CD <- c(">=", "<=", ">=")
optimum <- lp(
direction = "max",
objective.in = Fun,
const.mat = A,
const.dir = CD,
const.rhs = B,
compute.sens = TRUE)
optimum
optimum$solution
plot_ly(mode = "lines+markers") |>
add_region(
xy = rbind(c(0, 40), c(0, 35), c(70, 0), c(90, 0), c(90, 40)),
name = "2x_1+x_2\\geq70",
color = "rgba(255, 212, 255, 0.3)") |>
add_region(
xy = rbind(c(0, 40), c(40, 0), c(90, 0), c(90, 40)),
name = "x_1+x_2\\leq40",
color = "rgba(255, 212, 96, 0.3)") |>
add_region(
xy = rbind(c(0, 40), c(0, 30), c(90, 0), c(90, 40)),
name = "x_1+3x_2\\geq90",
color = "rgba(255, 255, 96, 0.3)") |>
config(mathjax = "cdn")
x <- seq(0, 90, length.out = 100)
y <- seq(0, 40, length.out = 100)
z <- outer(x, y, FUN = \(x1, x2) {
40 * x1 + 60 * x2
}) |> t()
plot_ly(x = x, y = y, z = z, type = "contour") |>
add_region(
xy = rbind(c(15, 40), c(24, 22), c(90, 0), c(90, 40)),
name = "region",
color = "rgba(168, 216, 234, 0.5)") |>
config(mathjax = "cdn")
library(lpSolve)
Fun <- c(40, 60)
A <- rbind(c(2, 1), c(1, 1), c(1, 3))
B <- c(70, 40, 90)
CD <- c(">=", ">=", ">=")
optimum <- lp(
direction = "max",
objective.in = Fun,
const.mat = A,
const.dir = CD,
const.rhs = B,
compute.sens = TRUE)
optimum
optimum$solution
plot_ly(mode = "lines+markers") |>
add_region(
xy = rbind(c(0, 40), c(0, 35), c(70, 0), c(90, 0), c(90, 40)),
name = "2x_1+x_2\\geq70",
color = "rgba(255, 212, 255, 0.3)") |>
add_region(
xy = rbind(c(0, 40), c(40, 0), c(90, 0), c(90, 40)),
name = "x_1+x_2\\leq40",
color = "rgba(255, 212, 96, 0.3)") |>
add_region(
xy = rbind(c(0, 40), c(0, 30), c(90, 0), c(90, 40)),
name = "x_1+3x_2\\geq90",
color = "rgba(255, 255, 96, 0.3)") |>
config(mathjax = "cdn")
library(lpSolve)
rm(list=ls())
Fun <- c(10, 4, 8, 6, 2, 3, 8, 2, 6, 6)
A <- rbind(
c(1, 1, 1, 1, 0, 0, 0, 0, 0, 0),
c(0, 0, 0, 0, 1, 1, 0, 0, 0, 0),
c(0, 0, 0, 0, 0, 0, 1, 1, 1, 1),
c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1),
diag(10))
B <- c(400, 800, 600, 1200)
CD <- c("<=", "<=", "<=", ">=")
B <- c(B, replicate(10, 700))
CD <- c(CD, replicate(10, "<="))
optimum <- lp(
direction = "min",
objective.in = Fun,
const.mat = A,
const.dir = CD,
const.rhs = B,
compute.sens = TRUE)
optimum
optimum$solution
which(optimum$solution>0)
library(lpSolveAPI)
lprob <- make.lp(0, 10)
stub <- lp.control(lprob, sense = "min")
rm(stub)
add.constraint(lprob, c(1, 1, 1, 1, 0, 0, 0, 0, 0, 0), "<=", 400)
add.constraint(lprob, c(0, 0, 0, 0, 1, 1, 0, 0, 0, 0), "<=", 800)
add.constraint(lprob, c(0, 0, 0, 0, 0, 0, 1, 1, 1, 1), "<=", 600)
add.constraint(lprob, c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1), ">=", 1200)
add.constraint(lprob, c(1, 0, 0, 0, 0, 0, 0, 0, 0, 0), "<=", 700)
add.constraint(lprob, c(0, 1, 0, 0, 0, 0, 0, 0, 0, 0), "<=", 700)
add.constraint(lprob, c(0, 0, 1, 0, 0, 0, 0, 0, 0, 0), "<=", 700)
add.constraint(lprob, c(0, 0, 0, 1, 0, 0, 0, 0, 0, 0), "<=", 700)
add.constraint(lprob, c(0, 0, 0, 0, 1, 0, 0, 0, 0, 0), "<=", 700)
add.constraint(lprob, c(0, 0, 0, 0, 0, 1, 0, 0, 0, 0), "<=", 700)
add.constraint(lprob, c(0, 0, 0, 0, 0, 0, 1, 0, 0, 0), "<=", 700)
add.constraint(lprob, c(0, 0, 0, 0, 0, 0, 0, 1, 0, 0), "<=", 700)
add.constraint(lprob, c(0, 0, 0, 0, 0, 0, 0, 0, 1, 0), "<=", 700)
add.constraint(lprob, c(0, 0, 0, 0, 0, 0, 0, 0, 0, 1), "<=", 700)
set.objfn(lprob, c(10, 4, 8, 6, 2, 3, 8, 2, 6, 6))
lprob
status_code <- solve(lprob)
get.objective(lprob)
get.variables(lprob)
get.sensitivity.obj(lprob)
get.sensitivity.rhs(lprob)
which(get.sensitivity.rhs(lprob)$duals>0)
optimum$sens.coef.from
optimum$sens.coef.to
optimum$duals
optimum$duals.from
optimum$duals.to
