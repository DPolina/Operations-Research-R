optimum
optimum$solution
# Chunk 21
# Оптимальные пути:
routes_idx <- which(optimum$solution == 1)
routes_idx
for(i in routes_idx){
print(paths[[i]])
}
# Chunk 22
plot_routes <- function(graph, selected_routes, special_nodes) {
transparent <- rgb(1, 1, 1, 0)
vertex_size <- 20
V(graph)$size <- vertex_size * 1.1
V(graph)$color <- rgb(1.00,1.00,0.60) # Useless vertices in this solution
E(graph)$color <- transparent # Target vertices
edge_list <- c()
for (j in 1:(length(selected_routes[[1]]) - 1)) {
vertex1 <- selected_routes[[1]][j]
vertex2 <- selected_routes[[1]][j + 1]
edge <- get.edge.ids(graph, c(vertex1, vertex2))
edge_list <- c(edge_list, edge)
intermediate_vertices <- selected_routes[[1]][-c(1, length(selected_routes[[1]]))]
V(graph)$color[intermediate_vertices] <- rgb(0.80,1.00,0.60) # Set intermediate vertices
}
E(graph)$color[edge_list] <- "red" # Set used edges as red
# Set the color of labels on unused edges to white
E(graph)$label.color <- ifelse(E(graph)$color == transparent, transparent, "black")
plot(graph, layout = layout.circle, edge.label = E(graph)$weight)
}
# Chunk 23
plot(g, layout = layout.circle, edge.label = E(g)$weight)
for (i in routes_idx) {
plot_routes(g, list(paths[[i]]), v)
title <- paste("Маршрут №", i, " [ $$:", delays[i], "]")
title(main = title)
}
# Chunk 1
rm(list=ls())
# Chunk 2
library(digest)
library(lpSolve)
library(extraDistr)
set.seed(digest2int('Дроздовская Полина Кирилловна'))
#simple <- FALSE
simple <- TRUE
# Chunk 3
p <- ifelse(simple, rdunif(1,6,10), rdunif(1,25,50))
p
# Chunk 4
r <- ifelse(simple,2,rdunif(1,3,5))
r
# Chunk 5
library(igraph)
repeat
{
g <<- sample_gnp(p, ifelse(simple,0.2,0.05))
if(is_connected(g))
break
}
# Chunk 6
q <- length(E(g))
q
# Chunk 7
E(g)$weight <- rdunif(q,1,100)
# Chunk 8
V(g)$standby <- if(simple) rep(2,p) else rdunif(p,r,5)
# Chunk 9
E(g)$standby <- if(simple) rep(2,q) else rdunif(q,r,5)
# Chunk 10
v <- farthest_vertices(g)$vertices
v
k <- v[1]
l <- v[2]
k
l
# Chunk 11
library(stringr)
latex_array <- \(x) gsub('(.{0,100})\\K,',',\\\\\\\\', paste(x, collapse = ',') |> paste0(',')  , perl=TRUE) |> str_sub(end = -4)
latex_adj_list <- \(g) g |> as_edgelist() |> apply(1, \(edg) edg |> paste(collapse = '\\ue')) |> latex_array()
# Chunk 12
plot(g, layout = layout.circle, edge.label = E(g)$weight)
# Chunk 13
library(igraph)
# Нахождение всех простых путей между k и l:
paths <- all_simple_paths(g, from = k, to = l)
paths
# Chunk 14
# Количество маршрутов:
N <- length(paths)
# Времена задержки по маршрутам:
delays <- sapply(paths, function(path) sum(E(g, path = path)$weight))
# lapply - returns a list
# sapply - returns vector or matrix
delays
# Chunk 15
# Ограничения:
Fun <- delays # Стоимость пути
A <- matrix(0, nrow = 1 + p + q, ncol = N) # A - ограничения
B <- r # Правая часть ограничений
A[1, ] <- 1 # 1-е ограничение - сумма всех корней - r (2)
# Chunk 16
# Ограничения по маршрутизаторам:
set_restrictions <- sapply(1:N, function(i) {
routers <- paths[[i]]
A[routers + 1, i] <- 1
})
# Роутеры - по строкам, маршруты - по столбцам
B <- c(B, V(g)$standby)
# Chunk 17
# Ограничения по линиям связи:
set_restrictions <- sapply(1:N, function(i) {
lines <- E(g, path = paths[[i]])
A[lines + 1 + p, i] <- 1 # 1 - целевая функция, p - маршрутизаторы
})
A
# Chunk 18
B <- c(B, E(g)$standby)
B
# Chunk 19
# Знаки ограничений:
CD <- c("=", rep("<=", nrow(A) - 1))
CD
# Chunk 20
library(lpSolve)
optimum <- lp(
direction = "min",
objective.in = Fun,
const.mat = A,
const.dir = CD,
const.rhs = B,
all.bin = TRUE
)
optimum
optimum$solution
# Chunk 21
# Оптимальные пути:
routes_idx <- which(optimum$solution == 1)
routes_idx
for(i in routes_idx){
print(paths[[i]])
}
# Chunk 22
plot_routes <- function(graph, selected_routes, special_nodes) {
transparent <- rgb(1, 1, 1, 0)
vertex_size <- 20
V(graph)$size <- vertex_size * 1.1
V(graph)$color <- rgb(1.00,1.00,0.60) # Useless vertices in this solution
E(graph)$color <- transparent # Target vertices
edge_list <- c()
for (j in 1:(length(selected_routes[[1]]) - 1)) {
vertex1 <- selected_routes[[1]][j]
vertex2 <- selected_routes[[1]][j + 1]
edge <- get.edge.ids(graph, c(vertex1, vertex2))
edge_list <- c(edge_list, edge)
intermediate_vertices <- selected_routes[[1]][-c(1, length(selected_routes[[1]]))]
V(graph)$color[intermediate_vertices] <- rgb(0.80,1.00,0.60) # Set intermediate vertices
}
E(graph)$color[edge_list] <- "red" # Set used edges as red
# Set the color of labels on unused edges to white
E(graph)$label.color <- ifelse(E(graph)$color == transparent, transparent, "black")
plot(graph, layout = layout.circle, edge.label = E(graph)$weight)
}
# Chunk 23
plot(g, layout = layout.circle, edge.label = E(g)$weight)
for (i in routes_idx) {
plot_routes(g, list(paths[[i]]), v)
title <- paste("Маршрут №", i, " [ $$:", delays[i], "]")
title(main = title)
}
# Chunk 1
rm(list=ls())
# Chunk 2
library(digest)
library(lpSolve)
library(extraDistr)
set.seed(digest2int('Дроздовская Полина Кирилловна'))
simple <- FALSE
# Chunk 3
p <- ifelse(simple, rdunif(1,6,10), rdunif(1,25,50))
p
# Chunk 4
r <- ifelse(simple,2,rdunif(1,3,5))
r
# Chunk 5
library(igraph)
repeat
{
g <<- sample_gnp(p, ifelse(simple,0.2,0.05))
if(is_connected(g))
break
}
# Chunk 6
q <- length(E(g))
q
# Chunk 7
E(g)$weight <- rdunif(q,1,100)
# Chunk 8
V(g)$standby <- if(simple) rep(2,p) else rdunif(p,r,5)
# Chunk 9
E(g)$standby <- if(simple) rep(2,q) else rdunif(q,r,5)
# Chunk 10
v <- farthest_vertices(g)$vertices
v
k <- v[1]
l <- v[2]
k
l
# Chunk 11
library(stringr)
latex_array <- \(x) gsub('(.{0,100})\\K,',',\\\\\\\\', paste(x, collapse = ',') |> paste0(',')  , perl=TRUE) |> str_sub(end = -4)
latex_adj_list <- \(g) g |> as_edgelist() |> apply(1, \(edg) edg |> paste(collapse = '\\ue')) |> latex_array()
# Chunk 12
plot(g, layout = layout.circle, edge.label = E(g)$weight)
V(g)$color <- rgb(1.00,0.80,0.40)
V(g)$size <- 22
# Chunk 13
library(igraph)
# Нахождение всех простых путей между k и l
paths <- all_simple_paths(g, k, l)
length(paths)
print(paths)
# Chunk 14
calculate_time_delay <- function(path, graph) {
edge_indices <- t(combn(path, 2))
edge_weights <- sapply(1 : (nrow(edge_indices)), function(j) {
edge <- get.edge.ids(graph, edge_indices[j, ])
if (length(edge) > 0) {
return(E(graph)$weight[edge]) # Get current weight of edge
} else {
return(0)
}
})
return(sum(unlist(edge_weights))) # Sum all edges
}
# Chunk 15
time_delays <- sapply(paths, calculate_time_delay, graph = g)
library(plotly)
add_region <- function(fig, xy, name = "region", color) {
add_trace(
fig,
x = xy[, 1],
y = xy[, 2],
type = "scatter",
fill = "toself",
fillcolor = color,
hoveron = "points+fills",
marker = list(color = "red"),
line = list(color = color),
text = apply(xy, 1, paste, collapse = ","),
hoverinfo = "text",
name = TeX(name)
)
}
library(lpSolve)
Fun <- c(0, 1)
A <- rbind(c(-1, 1), c(3, 2), c(2, 3))
B <- c(1, 12, 12)
CD <- c("<=", "<=", "<=")
optimum <- lp(
direction = "max",
objective.in = Fun,
const.mat = A,
const.dir = CD,
const.rhs = B
)
optimum
optimum$solution
optimum <- lp(
direction = "max",
objective.in = Fun,
const.mat = A,
const.dir = CD,
const.rhs = B,
all.int = TRUE
)
optimum
optimum$solution
library(plotly)
plot_ly(mode = "lines+markers") |>
add_region(
xy = rbind(c(0, 0), c(0, 1), c(6, 7), c(6, 0)),
name = "-x+y\\leq1",
color = "rgba(255, 212, 96, 0.5)") |>
add_region(
xy = rbind(c(0, 0), c(6, 0), c(0, 4)),
name = "2x+3y\\leq12",
color = "rgba(255, 212, 96, 0.5)") |>
add_region(
xy = rbind(c(0, 0), c(4, 0), c(0, 6)),
name = "3x+2y\\leq12",
color = "rgba(255, 212, 96, 0.5)") |>
config(mathjax = "cdn")
x <- seq(0, 4, length.out = 4)
y <- seq(0, 3, length.out = 4)
z <- outer(x, y, FUN = \(x, y) {
y
}) |> t()
plot_ly(x = x, y = y, z = z, type = "contour") |>
add_region(
xy = rbind(c(0, 0), c(0, 1), c(1.8, 2.8), c(12 / 5, 12 / 5), c(4, 0)),
name = "-x+y\\leq1",
color = "rgba(255, 212, 96, 0.5)") |>
add_trace(
x = c(0, 0, 1, 1, 1, 2, 2, 3, 3, 2, 4),
y = c(0, 1, 0, 1, 2, 1, 2, 1, 0, 0, 0),
type = "scatter",
name = "допустимые решения",
marker = list(color = "purple")) |>
add_trace(
x = c(1.8, 2),
y = c(2.8, 3),
type = "scatter",
name = "решение в\nдействительных\nчислах",
marker = list(color = "black")) |>
config(mathjax = "cdn")
Fun <- rep(1, 13)
B <- rep(1, 13)
CD <- rep(">=", 13)
constr_row <- function(...) {
tmp <- rep(0, 13)
tmp[c(...)] <- 1
return(tmp)
}
A <- rbind(
constr_row(1, 10, 11, 13),
constr_row(2, 9, 11),
constr_row(3, 8, 9, 13),
constr_row(4, 5, 6, 12),
constr_row(5, 4, 12),
constr_row(6, 4, 7, 12),
constr_row(7, 6, 8, 10, 13),
constr_row(8, 3, 6, 7, 13),
constr_row(9, 2, 3, 11, 13),
constr_row(10, 1, 7, 12, 13),
constr_row(11, 1, 2, 9, 13),
constr_row(12, 4, 5, 6, 10),
constr_row(13, 1, 3, 7, 8, 9, 10, 11)
)
optimum <- lp(
direction = "min",
objective.in = Fun,
const.mat = A,
const.dir = CD,
const.rhs = B,
all.bin = TRUE
)
optimum
optimum$solution
which(optimum$solution == 1)
Fun <- c(rep(0, 13), c(212,56,132,347,53,503,785,408,430,665,403,668,295))
B <- rep(1, 14)
CD <- c(rep(">=", 13), "=")
A <- rbind(
constr_row(1, 10, 11, 13),
constr_row(2, 9, 11),
constr_row(3, 8, 9, 13),
constr_row(4, 5, 6, 12),
constr_row(5, 4, 12),
constr_row(6, 4, 7, 12),
constr_row(7, 6, 8, 10, 13),
constr_row(8, 3, 6, 7, 13),
constr_row(9, 2, 3, 11, 13),
constr_row(10, 1, 7, 12, 13),
constr_row(11, 1, 2, 9, 13),
constr_row(12, 4, 5, 6, 10),
constr_row(13, 1, 3, 7, 8, 9, 10, 11))
A <- rbind(cbind(A, diag(13)), c(rep(1, 13), rep(0, 13)))
optimum <- lp(
direction = "min",
objective.in = Fun,
const.mat = A,
const.dir = CD,
const.rhs = B,
all.bin = TRUE
)
optimum
which(optimum$solution == 1)[1]
optimum$solution
# Chunk 1
rm(list=ls())
# Chunk 2
library(digest)
library(lpSolve)
library(extraDistr)
set.seed(digest2int('Дроздовская Полина Кирилловна'))
#simple <- FALSE
simple <- TRUE
# Chunk 3
p <- ifelse(simple, rdunif(1,6,10), rdunif(1,25,50))
p
# Chunk 4
r <- ifelse(simple,2,rdunif(1,3,5))
r
# Chunk 5
library(igraph)
repeat
{
g <<- sample_gnp(p, ifelse(simple,0.2,0.05))
if(is_connected(g))
break
}
# Chunk 6
q <- length(E(g))
q
# Chunk 7
E(g)$weight <- rdunif(q,1,100)
# Chunk 8
V(g)$standby <- if(simple) rep(2,p) else rdunif(p,r,5)
# Chunk 9
E(g)$standby <- if(simple) rep(2,q) else rdunif(q,r,5)
# Chunk 10
v <- farthest_vertices(g)$vertices
v
k <- v[1]
l <- v[2]
k
l
# Chunk 11
library(stringr)
latex_array <- \(x) gsub('(.{0,100})\\K,',',\\\\\\\\', paste(x, collapse = ',') |> paste0(',')  , perl=TRUE) |> str_sub(end = -4)
latex_adj_list <- \(g) g |> as_edgelist() |> apply(1, \(edg) edg |> paste(collapse = '\\ue')) |> latex_array()
# Chunk 12
plot(g, layout = layout.circle, edge.label = E(g)$weight)
# Chunk 13
library(igraph)
# Нахождение всех простых путей между k и l:
paths <- all_simple_paths(g, from = k, to = l)
paths
# Chunk 14
# Количество маршрутов:
N <- length(paths)
# Времена задержки по маршрутам:
delays <- sapply(paths, function(path) sum(E(g, path = path)$weight))
# lapply - returns a list
# sapply - returns vector or matrix
delays
# Chunk 15
# Ограничения:
Fun <- delays # Стоимость пути
A <- matrix(0, nrow = 1 + p + q, ncol = N) # A - ограничения
B <- r # Правая часть ограничений
A[1, ] <- 1 # 1-е ограничение - сумма всех корней - r (2)
# Chunk 16
# Ограничения по маршрутизаторам:
set_restrictions <- sapply(1:N, function(i) {
routers <- paths[[i]]
A[routers + 1, i] <- 1
})
# Роутеры - по строкам, маршруты - по столбцам
B <- c(B, V(g)$standby)
# Chunk 17
# Ограничения по линиям связи:
set_restrictions <- sapply(1:N, function(i) {
lines <- E(g, path = paths[[i]])
A[lines + 1 + p, i] <- 1 # 1 - целевая функция, p - маршрутизаторы
})
A
# Chunk 18
B <- c(B, E(g)$standby)
B
# Chunk 19
# Знаки ограничений:
CD <- c("=", rep("<=", nrow(A) - 1))
CD
# Chunk 20
library(lpSolve)
optimum <- lp(
direction = "min",
objective.in = Fun,
const.mat = A,
const.dir = CD,
const.rhs = B,
all.bin = TRUE
)
optimum
optimum$solution
# Chunk 21
# Оптимальные пути:
routes_idx <- which(optimum$solution == 1)
routes_idx
for(i in routes_idx){
print(paths[[i]])
}
# Chunk 22
plot_routes <- function(graph, selected_routes, special_nodes) {
transparent <- rgb(1, 1, 1, 0)
vertex_size <- 20
V(graph)$size <- vertex_size * 1.1
V(graph)$color <- rgb(1.00,1.00,0.60) # Useless vertices in this solution
E(graph)$color <- transparent # Target vertices
edge_list <- c()
for (j in 1:(length(selected_routes[[1]]) - 1)) {
vertex1 <- selected_routes[[1]][j]
vertex2 <- selected_routes[[1]][j + 1]
edge <- get.edge.ids(graph, c(vertex1, vertex2))
edge_list <- c(edge_list, edge)
intermediate_vertices <- selected_routes[[1]][-c(1, length(selected_routes[[1]]))]
V(graph)$color[intermediate_vertices] <- rgb(0.80,1.00,0.60) # Set intermediate vertices
}
E(graph)$color[edge_list] <- "red" # Set used edges as red
# Set the color of labels on unused edges to white
E(graph)$label.color <- ifelse(E(graph)$color == transparent, transparent, "black")
plot(graph, layout = layout.circle, edge.label = E(graph)$weight)
}
# Chunk 23
plot(g, layout = layout.circle, edge.label = E(g)$weight)
for (i in routes_idx) {
plot_routes(g, list(paths[[i]]), v)
title <- paste("Маршрут №", i, " [ $$:", delays[i], "]")
title(main = title)
}
